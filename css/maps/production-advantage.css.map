{"version":3,"sources":["production-advantage/production-advantage.scss","../styles/helpers/_mixins.scss","production-advantage/production-advantage.css","../styles/helpers/_family.scss"],"names":[],"mappings":"AAEA,sBACC,WAAY,KACZ,OAAQ,IAAA,MAAA,QACR,QCuEoC,KDtEpC,QAAS,KACT,ICqEoC,KDpEpC,YAAa,WECd,mCACE,SFGA,CAAA,CAAA,EEAF,mCFMA,YAAA,IEFA,yCFMC,UAAA,oBEFD,4BACE,cFKA,IAAiB,MGJhB,oBDAD,eAAgB,KAChB,QAAS,KACT,sBAAuB,KAAK,IAC5B,IAAK,QAAQ,KAGf,iDACE,mBACA,eAAgB","file":"../production-advantage.css","sourcesContent":["@import \"../../styles/helpers/_helpers\";\n\n.production-advantage {\n\tbackground: #ffffff;\n\tborder: 1px solid #dfe1e3;\n\tpadding: rem(32px);\n\tdisplay: grid;\n\tgap: rem(32px);\n\talign-items: flex-start;\n\t.field-image {\n\t\tgrid-row: 1/3;\n\t}\n\t.field-title {\n\t\tfont-weight: 700;\n\t}\n\t.field-description {\n\t\tfont-size: var(--font-size-sm);\n\t}\n}\n.production-advantage__item {\n\tborder-bottom: 1px solid var(--color-border);\n\tpadding-bottom: rem(32px);\n\tdisplay: grid;\n\tgrid-template-columns: auto 1fr;\n\tgap: rem(20px 32px);\n\t@include last(1) {\n\t\tborder-bottom: none;\n\t\tpadding-bottom: 0;\n\t}\n}\n","@mixin font-mixin($style, $main-path, $family, $map) {\r\n    $dir-name: $family + \"/\"; // Генерируем название директории, в которой находится шрифт\r\n    @each $weight, $path in $map {\r\n        @font-face {\r\n            font-display: swap;\r\n            font-family: $family;\r\n            src: url(\"#{$main-path + $dir-name + $style + $path}.eot\");\r\n            src: url(\"#{$main-path + $dir-name + $style + $path}.eot?#iefix\") format(\"embedded-opentype\"),\r\n            url(\"#{$main-path + $dir-name + $style + $path}.woff2\") format(\"woff2\"),\r\n            url(\"#{$main-path + $dir-name + $style + $path}.woff\") format(\"woff\"),\r\n            url(\"#{$main-path + $dir-name + $style + $path}.ttf\") format(\"truetype\"),\r\n            url(\"#{$main-path + $dir-name + $style + $path}.svg##{$family}\") format(\"svg\");\r\n            font-style: $style;\r\n            font-weight: $weight;\r\n        }\r\n    }\r\n}\r\n\r\n@mixin placeholder() {\r\n    &::-webkit-input-placeholder {@content;}\r\n    &::-moz-placeholder {@content;}\r\n    &:-moz-placeholder {@content;}\r\n    &:-ms-input-placeholder {@content;}\r\n}\r\n\r\n@mixin fontAwesome($code: \"\", $size: inherit, $weight: 100) {\r\n    content: $code;\r\n    font-family: \"Font Awesome 5 Pro\";\r\n    font-size: $size;\r\n    font-weight: $weight;\r\n    line-height: 1;\r\n}\r\n\r\n@mixin iconmoon($code: \"\", $size: inherit, $weight: 100) {\r\n    content: $code;\r\n    font-family: \"icomoon\";\r\n    font-size: $size;\r\n    font-weight: $weight;\r\n    line-height: 1;\r\n}\r\n\r\n// REM CONVERT\r\n$rem-baseline: 16px !default;\r\n$rem-fallback: false !default;\r\n$rem-px-only: false !default;\r\n\r\n@function rem-separator($list, $separator: false) {\r\n    @if $separator == \"comma\" or $separator == \"space\" {\r\n        @return append($list, null, $separator);\r\n    }\r\n\r\n    @if function-exists(\"list-separator\") == true {\r\n        @return list-separator($list);\r\n    }\r\n\r\n    // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)\r\n    $test-list: ();\r\n    @each $item in $list {\r\n        $test-list: append($test-list, $item, space);\r\n    }\r\n\r\n    @return if($test-list == $list, space, comma);\r\n}\r\n\r\n@mixin rem-baseline($zoom: 100%) {\r\n    font-size: $zoom / 16px * $rem-baseline;\r\n}\r\n\r\n@function rem-convert($to, $values...) {\r\n    $result: ();\r\n    $separator: rem-separator($values);\r\n\r\n    @each $value in $values {\r\n        @if type-of($value) == \"number\" and unit($value) == \"rem\" and $to == \"px\" {\r\n            $result: append($result, $value / 1rem * $rem-baseline, $separator);\r\n        } @else if type-of($value) == \"number\" and unit($value) == \"px\" and $to == \"rem\" {\r\n            $result: append($result, $value / $rem-baseline * 1rem, $separator);\r\n        } @else if type-of($value) == \"list\" {\r\n            $value-separator: rem-separator($value);\r\n            $value: rem-convert($to, $value...);\r\n            $value: rem-separator($value, $value-separator);\r\n            $result: append($result, $value, $separator);\r\n        } @else {\r\n            $result: append($result, $value, $separator);\r\n        }\r\n    }\r\n\r\n    @return if(length($result) == 1, nth($result, 1), $result);\r\n}\r\n\r\n@function rem($values...) {\r\n    @if $rem-px-only {\r\n        @return rem-convert(px, $values...);\r\n    } @else {\r\n        @return rem-convert(rem, $values...);\r\n    }\r\n}\r\n\r\n@mixin rem($properties, $values...) {\r\n    @if type-of($properties) == \"map\" {\r\n        @each $property in map-keys($properties) {\r\n            @include rem($property, map-get($properties, $property));\r\n        }\r\n    } @else {\r\n        @each $property in $properties {\r\n            @if $rem-fallback or $rem-px-only {\r\n                #{$property}: rem-convert(px, $values...);\r\n            }\r\n            @if not $rem-px-only {\r\n                #{$property}: rem-convert(rem, $values...);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// EM CONVERT\r\n// list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)\r\n@function em-separator($list) {\r\n    @if function-exists(\"list-separator\") == true {\r\n        @return list-separator($list);\r\n    }\r\n\r\n    $test-list: ();\r\n    @each $item in $list {\r\n        $test-list: append($test-list, $item, space);\r\n    }\r\n\r\n    @return if($test-list == $list, space, comma);\r\n}\r\n@function em($values...) {\r\n    $context: nth($values, length($values));\r\n    $result: ();\r\n    $separator: em-separator($values);\r\n\r\n    @for $i from 1 through length($values) - 1 {\r\n        $value: nth($values, $i);\r\n        @if type-of($value) == \"number\" and unit($value) == \"px\" {\r\n            $result: append($result, $value / $context * 1em, $separator);\r\n        } @else if type-of($value) == \"list\" {\r\n            $result: append($result, em(append($value, $context)...), $separator);\r\n        } @else {\r\n            $result: append($result, $value, $separator);\r\n        }\r\n    }\r\n\r\n    @return if(length($result) == 1, nth($result, 1), $result);\r\n}\r\n@mixin em($properties, $context) {\r\n    @each $property in map-keys($properties) {\r\n        #{$property}: em(append(map-get($properties, $property), $context)...);\r\n    }\r\n}",null,"/// Select all children from the first to `$num`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n@mixin first($num) {\r\n  @if $num == 1 {\r\n    &:first-child {\r\n      @content;\r\n    }\r\n  } @else {\r\n    &:nth-child(-n + #{$num}) {\r\n      @content;\r\n    }\r\n  }\r\n}\r\n\r\n/// Select all children from the last to `$num`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n@mixin last($num) {\r\n  &:nth-last-child(-n + #{$num}) {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// Select all children after the first to `$num`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n@mixin after-first($num) {\r\n  &:nth-child(n + #{$num + 1}) {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// Select all children before `$num` from the last.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n@mixin from-end($num) {\r\n  &:nth-last-child(#{$num}) {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// Select all children between `$first` and `$last`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin between($first, $last) {\r\n  &:nth-child(n + #{$first}):nth-child(-n + #{$last}) {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// Select all even children between `$first` and `$last`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin even-between($first, $last) {\r\n  &:nth-child(even):nth-child(n + #{$first}):nth-child(-n + #{$last}) {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// Select all odd children between `$first` and `$last`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin odd-between($first, $last) {\r\n  &:nth-child(odd):nth-child(n + #{$first}):nth-child(-n + #{$last}) {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// Select all `$num` children between `$first` and `$last`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin n-between($num, $first, $last) {\r\n  &:nth-child(#{$num}n):nth-child(n + #{$first}):nth-child(-n + #{$last}) {\r\n    @content;\r\n  }\r\n}\r\n\r\n\r\n/// Select all children but `$num`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n@mixin all-but($num) {\r\n  &:not(:nth-child(#{$num})) {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// Select children each `$num`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n/// @alias every\r\n@mixin each($num) {\r\n  &:nth-child(#{$num}n) {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// Select children each `$num`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n@mixin every($num) {\r\n  &:nth-child(#{$num}n) {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// Select the `$num` child from the start and the `$num` child from the last.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n@mixin from-first-last($num) {\r\n  &:nth-child(#{$num}),\r\n  &:nth-last-child(#{$num}) {\r\n    @content;\r\n  }\r\n}\r\n\r\n\r\n/// Select the item in the middle of `$num` child. Only works with odd number\r\n/// chain.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n@mixin middle($num) {\r\n  &:nth-child(#{round($num / 2)}) {\r\n    @content;\r\n  }\r\n}\r\n\r\n\r\n/// Select all children between the `$num` first and the `$num` last.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n@mixin all-but-first-last($num) {\r\n  &:nth-child(n + #{$num}):nth-last-child(n + #{$num}) {\r\n    @content;\r\n  }\r\n}\r\n\r\n\r\n/// This quantity-query mixin will only select the first of `$limit` items. It will not\r\n/// work if there is not as much as item as you set in `$limit`.\r\n/// @group Quantity queries\r\n/// @param {number} $limit\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin first-of($limit) {\r\n  &:nth-last-child(#{$limit}):first-child {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// This quantity-query mixin will only select the last of `$limit` items. It will not\r\n/// if there is not as much as item as you set in `$limit`.\r\n/// @group Quantity queries\r\n/// @param {number} $limit\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin last-of($limit) {\r\n  &:nth-of-type(#{$limit}):nth-last-of-type(1) {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// This quantity-query mixin will select every items if there is at least `$num` items. It will not\r\n/// if there is not as much as item as you set in `$num`.\r\n/// @group Quantity queries\r\n/// @param {number} $limit\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin at-least($num) {\r\n  $selector: &;\r\n  $child: nth(nth($selector, -1), -1);\r\n\r\n  &:nth-last-child(n + #{$num}),\r\n  &:nth-last-child(n + #{$num}) ~ #{$child} {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// This quantity-query mixin will select every items if there is at most `$num` items. It will not\r\n/// if there is not as much as item as you set in `$num`.\r\n/// @group Quantity queries\r\n/// @param {number} $limit\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin at-most($num) {\r\n  $selector: &;\r\n  $child: nth(nth($selector, -1), -1);\r\n\r\n  &:nth-last-child(-n + #{$num}):first-child,\r\n  &:nth-last-child(-n + #{$num}):first-child ~ #{$child} {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// This quantity-query mixin will select every items only if there is between `$min` and `$max` items.\r\n/// @group Quantity queries\r\n/// @param {number} $limit\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin in-between($min, $max) {\r\n  $selector: &;\r\n  $child: nth(nth($selector, -1), -1);\r\n\r\n  &:nth-last-child(n + #{$min}):nth-last-child(-n + #{$max}):first-child,\r\n  &:nth-last-child(n + #{$min}):nth-last-child(-n + #{$max}):first-child ~ #{$child} {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// Select the first exact child\r\n/// @group no-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin first-child() {\r\n  &:first-of-type {\r\n    @content\r\n  }\r\n}\r\n\r\n/// Select the last exact child\r\n/// @group no-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin last-child() {\r\n  &:last-of-type {\r\n    @content\r\n  }\r\n}\r\n\r\n/// Select all even children.\r\n/// @group no-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin even() {\r\n  &:nth-child(even) {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// Select all odd children.\r\n/// @group no-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin odd() {\r\n  &:nth-child(odd) {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// Select only the first and last child.\r\n/// @group no-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin first-last() {\r\n  &:first-child,\r\n  &:last-child {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// Will only select the child if it’s unique.\r\n/// @group no-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @alias only\r\n@mixin unique() {\r\n  &:only-child {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// Will only select the child if it’s unique.\r\n/// @group no-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin only() {\r\n  &:only-child {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// Will only select children if they are not unique. Meaning if there is at\r\n/// least 2 children, the style is applied.\r\n/// @group no-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin not-unique() {\r\n  &:not(:only-child) {\r\n    @content;\r\n  }\r\n}\r\n\r\n\r\n/// This mixin is used to automatically sort z-index in numerical order. But it\r\n/// can also sort them in anti-numerical order, depending the parameters you use.\r\n/// @group using functions\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - Number of children\r\n/// @param {string} $direction [forward] - Direction of the sort\r\n/// @param {number} $index [0] - Index of the sorting\r\n@mixin child-index($num, $direction: 'forward', $index: 0) {\r\n  @for $i from 1 through $num {\r\n    @if ($direction == 'forward') {\r\n      &:nth-child(#{$i}) {\r\n        z-index: order-index($i, $index);\r\n        @content;\r\n      }\r\n    } @else if ($direction == 'backward') {\r\n      &:nth-last-child(#{$i}) {\r\n        z-index: order-index($i, $index);\r\n        @content;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/// Used by the child-index mixin. It will returned the proper sorted numbers\r\n/// depending on the `$index` value.\r\n/// @access private\r\n/// @param {number} $num - Number of children\r\n/// @param {number} $index - Index of the sorting\r\n@function order-index($i, $index) {\r\n  @return ($index + $i);\r\n}\r\n"]}