{"version":3,"sources":["blocks/block.scss","blocks/block.css","../styles/helpers/_family.scss","../styles/helpers/_media-queries.scss"],"names":[],"mappings":"AAEA,OACI,QAAS,KACT,eAAgB,OAChB,IAAK,gBCCT,eDGI,QAAK,KCDP,IAAK,gBAGP,cACE,OAAQ,KAAK,EAAE,EDGjB,eAAgB,UCChB,gBDDA,SAAA,SCSA,+BDOA,+BCLA,+BACA,+BAJA,+BAFA,8BADA,kCAEA,+BDYI,WAAK,EAMT,eACI,SAAA,SACA,QAAS,KCRX,IAAK,gBDcP,cAAiB,OCVjB,cDeI,iBAAkB,QAClB,QAAS,KCXb,kBACE,QDeM,KAXR,sBAaI,IAAM,6CEvDQ,IDwChB,YDiBoB,CAAE,CAAC,GAfzB,iBAkBI,2BClBF,QDmBM,qBACH,ECjBL,qCACE,WDqBM,ECdR,kCE/BE,iCF2BF,iCDPA,YAAG,CAAA,CAAA,GCwBH,mCAFA,oCACA,qCAFA,uCEzCE,kCFwCF,mCExCE,mCF8CF,2BACE,aDwBmB,sBCrBrB,eD2BI,SAAA,OCzBF,eAAgB,IAGlB,uBACE,QAAS,KAGX,0CACE,kCACE,QAAS,KACT,sBAAuB,+CACvB,SAAU,MAId,0CACE,kBAIA,kCAHE,QAAS,UAQb,yCACE,kBACE,OAAQ,EAAE,MACV,QAAS,qBAAqB","file":"../block.css","sourcesContent":["@import \"../../styles/helpers/_helpers\";\n\n.block {\n    display: flex;\n    flex-direction: column;\n    gap: var(--grid-gap);\n}\n.block__header {\n    display: grid;\n    gap: var(--grid-gap);\n}\n.block__title {\n    margin: 1.5 - rem(24px) 0 0 0;\n    text-transform: uppercase;\n}\n.block__content {\n    position: relative;\n    //grid-column: 1/-1;\n    table,\n    p,\n    ul,\n    ol,\n    h3,\n    h4,\n    h5,\n    h6 {\n        @include first(1) {\n            margin-top: 0;\n        }\n    }\n}\n.block__footer {\n    position: relative;\n    display: grid;\n    gap: var(--grid-gap);\n    justify-items: center;\n}\n\n// дополнительный класс для блока с обозначенными границами в пределах контента сайта.\n// например: фон, фон картинка, бордер, тень.\n.block-border {\n    background-color: yellowgreen;\n    padding: 3rem;\n}\n\n// дополнительный класс для блока типа секция.\n// например: когда блок выходит за рамки контента.\n// эффект отрицательного маржина.\ndiv.block-section {\n    display: grid;\n    grid-template-columns: 1fr repeat(var(--grid-column), var(--grid-width)) 1fr;\n\n    grid-column: 1/-1;\n    background-color: var(--color-block-section);\n    padding: var(--block-spacing) 0;\n    //margin: 0 calc((var(--container) - 100vw)/2);\n    //padding: var(--block-spacing) calc((100vw - var(--container))/2);\n    @include max-screen(768px) {\n        margin: 0 -16px;\n        padding: var(--block-spacing) 16px;\n    }\n    .block {\n        @include first(1) {\n            margin-top: 0;\n        }\n    }\n    .block__header {\n        grid-column: 2/-2;\n    }\n    .block__content {\n        grid-column: 2/-2;\n    }\n    .block__footer {\n        grid-column: 2/-2;\n    }\n    input[type=\"tel\"],\n    input[type=\"text\"],\n    input[type=\"password\"],\n    input[type=\"email\"],\n    input[type=\"number\"],\n    input[type=\"date\"],\n    input[type=\"time\"],\n    textarea {\n        border-color: var(--color-2-border);\n    }\n}\n\n// когда блок состоит их двух колонок\n.block-flex-col-2 {\n    @include max-screen(1199px) {\n        display: contents;\n    }\n    > .block__content {\n        @include min-screen(1200px) {\n            display: grid;\n            grid-template-columns: repeat(auto-fill, minmax(calc(50% - 1rem), 1fr));\n            grid-gap: rem(32px);\n        }\n        @include max-screen(1199px) {\n            display: contents;\n        }\n    }\n}\n.block__slider {\n    overflow: hidden;\n    padding-bottom: 1px;\n}\n.block__slider-wrapper {\n    display: flex;\n}",null,"/// Select all children from the first to `$num`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n@mixin first($num) {\r\n  @if $num == 1 {\r\n    &:first-child {\r\n      @content;\r\n    }\r\n  } @else {\r\n    &:nth-child(-n + #{$num}) {\r\n      @content;\r\n    }\r\n  }\r\n}\r\n\r\n/// Select all children from the last to `$num`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n@mixin last($num) {\r\n  &:nth-last-child(-n + #{$num}) {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// Select all children after the first to `$num`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n@mixin after-first($num) {\r\n  &:nth-child(n + #{$num + 1}) {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// Select all children before `$num` from the last.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n@mixin from-end($num) {\r\n  &:nth-last-child(#{$num}) {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// Select all children between `$first` and `$last`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin between($first, $last) {\r\n  &:nth-child(n + #{$first}):nth-child(-n + #{$last}) {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// Select all even children between `$first` and `$last`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin even-between($first, $last) {\r\n  &:nth-child(even):nth-child(n + #{$first}):nth-child(-n + #{$last}) {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// Select all odd children between `$first` and `$last`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin odd-between($first, $last) {\r\n  &:nth-child(odd):nth-child(n + #{$first}):nth-child(-n + #{$last}) {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// Select all `$num` children between `$first` and `$last`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin n-between($num, $first, $last) {\r\n  &:nth-child(#{$num}n):nth-child(n + #{$first}):nth-child(-n + #{$last}) {\r\n    @content;\r\n  }\r\n}\r\n\r\n\r\n/// Select all children but `$num`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n@mixin all-but($num) {\r\n  &:not(:nth-child(#{$num})) {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// Select children each `$num`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n/// @alias every\r\n@mixin each($num) {\r\n  &:nth-child(#{$num}n) {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// Select children each `$num`.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n@mixin every($num) {\r\n  &:nth-child(#{$num}n) {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// Select the `$num` child from the start and the `$num` child from the last.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n@mixin from-first-last($num) {\r\n  &:nth-child(#{$num}),\r\n  &:nth-last-child(#{$num}) {\r\n    @content;\r\n  }\r\n}\r\n\r\n\r\n/// Select the item in the middle of `$num` child. Only works with odd number\r\n/// chain.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n@mixin middle($num) {\r\n  &:nth-child(#{round($num / 2)}) {\r\n    @content;\r\n  }\r\n}\r\n\r\n\r\n/// Select all children between the `$num` first and the `$num` last.\r\n/// @group with-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - id of the child\r\n@mixin all-but-first-last($num) {\r\n  &:nth-child(n + #{$num}):nth-last-child(n + #{$num}) {\r\n    @content;\r\n  }\r\n}\r\n\r\n\r\n/// This quantity-query mixin will only select the first of `$limit` items. It will not\r\n/// work if there is not as much as item as you set in `$limit`.\r\n/// @group Quantity queries\r\n/// @param {number} $limit\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin first-of($limit) {\r\n  &:nth-last-child(#{$limit}):first-child {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// This quantity-query mixin will only select the last of `$limit` items. It will not\r\n/// if there is not as much as item as you set in `$limit`.\r\n/// @group Quantity queries\r\n/// @param {number} $limit\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin last-of($limit) {\r\n  &:nth-of-type(#{$limit}):nth-last-of-type(1) {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// This quantity-query mixin will select every items if there is at least `$num` items. It will not\r\n/// if there is not as much as item as you set in `$num`.\r\n/// @group Quantity queries\r\n/// @param {number} $limit\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin at-least($num) {\r\n  $selector: &;\r\n  $child: nth(nth($selector, -1), -1);\r\n\r\n  &:nth-last-child(n + #{$num}),\r\n  &:nth-last-child(n + #{$num}) ~ #{$child} {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// This quantity-query mixin will select every items if there is at most `$num` items. It will not\r\n/// if there is not as much as item as you set in `$num`.\r\n/// @group Quantity queries\r\n/// @param {number} $limit\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin at-most($num) {\r\n  $selector: &;\r\n  $child: nth(nth($selector, -1), -1);\r\n\r\n  &:nth-last-child(-n + #{$num}):first-child,\r\n  &:nth-last-child(-n + #{$num}):first-child ~ #{$child} {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// This quantity-query mixin will select every items only if there is between `$min` and `$max` items.\r\n/// @group Quantity queries\r\n/// @param {number} $limit\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin in-between($min, $max) {\r\n  $selector: &;\r\n  $child: nth(nth($selector, -1), -1);\r\n\r\n  &:nth-last-child(n + #{$min}):nth-last-child(-n + #{$max}):first-child,\r\n  &:nth-last-child(n + #{$min}):nth-last-child(-n + #{$max}):first-child ~ #{$child} {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// Select the first exact child\r\n/// @group no-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin first-child() {\r\n  &:first-of-type {\r\n    @content\r\n  }\r\n}\r\n\r\n/// Select the last exact child\r\n/// @group no-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin last-child() {\r\n  &:last-of-type {\r\n    @content\r\n  }\r\n}\r\n\r\n/// Select all even children.\r\n/// @group no-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin even() {\r\n  &:nth-child(even) {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// Select all odd children.\r\n/// @group no-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin odd() {\r\n  &:nth-child(odd) {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// Select only the first and last child.\r\n/// @group no-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin first-last() {\r\n  &:first-child,\r\n  &:last-child {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// Will only select the child if it’s unique.\r\n/// @group no-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @alias only\r\n@mixin unique() {\r\n  &:only-child {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// Will only select the child if it’s unique.\r\n/// @group no-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin only() {\r\n  &:only-child {\r\n    @content;\r\n  }\r\n}\r\n\r\n/// Will only select children if they are not unique. Meaning if there is at\r\n/// least 2 children, the style is applied.\r\n/// @group no-arguments\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n@mixin not-unique() {\r\n  &:not(:only-child) {\r\n    @content;\r\n  }\r\n}\r\n\r\n\r\n/// This mixin is used to automatically sort z-index in numerical order. But it\r\n/// can also sort them in anti-numerical order, depending the parameters you use.\r\n/// @group using functions\r\n/// @content [Write the style you want to apply to the children, and it will be added within the @content directive]\r\n/// @param {number} $num - Number of children\r\n/// @param {string} $direction [forward] - Direction of the sort\r\n/// @param {number} $index [0] - Index of the sorting\r\n@mixin child-index($num, $direction: 'forward', $index: 0) {\r\n  @for $i from 1 through $num {\r\n    @if ($direction == 'forward') {\r\n      &:nth-child(#{$i}) {\r\n        z-index: order-index($i, $index);\r\n        @content;\r\n      }\r\n    } @else if ($direction == 'backward') {\r\n      &:nth-last-child(#{$i}) {\r\n        z-index: order-index($i, $index);\r\n        @content;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/// Used by the child-index mixin. It will returned the proper sorted numbers\r\n/// depending on the `$index` value.\r\n/// @access private\r\n/// @param {number} $num - Number of children\r\n/// @param {number} $index - Index of the sorting\r\n@function order-index($i, $index) {\r\n  @return ($index + $i);\r\n}\r\n","//  Author: Rafal Bromirski\r\n//  www: http://rafalbromirski.com/\r\n//  github: http://github.com/paranoida/sass-mediaqueries\r\n//\r\n//  Licensed under a MIT License\r\n//\r\n//  Version:\r\n//  1.6.1\r\n\r\n// --- generator ---------------------------------------------------------------\r\n\r\n@mixin mq($args...) {\r\n  $media-type: 'only screen';\r\n  $media-type-key: 'media-type';\r\n  $args: keywords($args);\r\n  $expr: '';\r\n\r\n  @if map-has-key($args, $media-type-key) {\r\n    $media-type: map-get($args, $media-type-key);\r\n    $args: map-remove($args, $media-type-key);\r\n  }\r\n\r\n  @each $key, $value in $args {\r\n    @if $value {\r\n      $expr: \"#{$expr} and (#{$key}: #{$value})\";\r\n    }\r\n  }\r\n\r\n  @media #{$media-type} #{$expr} {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- screen ------------------------------------------------------------------\r\n\r\n@mixin screen($min, $max, $orientation: false) {\r\n  @include mq($min-width: $min, $max-width: $max, $orientation: $orientation) {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin max-screen($max) {\r\n  @include mq($max-width: $max) {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin min-screen($min) {\r\n  @include mq($min-width: $min) {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin screen-height($min, $max, $orientation: false) {\r\n  @include mq($min-height: $min, $max-height: $max, $orientation: $orientation) {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin max-screen-height($max) {\r\n  @include mq($max-height: $max) {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin min-screen-height($min) {\r\n  @include mq($min-height: $min) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- hdpi --------------------------------------------------------------------\r\n\r\n@mixin hdpi($ratio: 1.3) {\r\n  @media only screen and (-webkit-min-device-pixel-ratio: $ratio),\r\n  only screen and (min-resolution: #{round($ratio*96)}dpi) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- hdtv --------------------------------------------------------------------\r\n\r\n@mixin hdtv($standard: '1080') {\r\n  $min-width: false;\r\n  $min-height: false;\r\n\r\n  $standards: ('720p', 1280px, 720px)\r\n              ('1080', 1920px, 1080px)\r\n              ('2K', 2048px, 1080px)\r\n              ('4K', 4096px, 2160px);\r\n\r\n  @each $s in $standards {\r\n    @if $standard == nth($s, 1) {\r\n      $min-width: nth($s, 2);\r\n      $min-height: nth($s, 3);\r\n    }\r\n  }\r\n\r\n  @include mq(\r\n    $min-device-width: $min-width,\r\n    $min-device-height: $min-height,\r\n    $min-width: $min-width,\r\n    $min-height: $min-height\r\n  ) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- iphone4 -----------------------------------------------------------------\r\n\r\n@mixin iphone4($orientation: false) {\r\n  $min: 320px;\r\n  $max: 480px;\r\n  $pixel-ratio: 2;\r\n  $aspect-ratio: '2/3';\r\n\r\n  @include mq(\r\n    $min-device-width: $min,\r\n    $max-device-width: $max,\r\n    $orientation: $orientation,\r\n    $device-aspect-ratio: $aspect-ratio,\r\n    $-webkit-device-pixel-ratio: $pixel-ratio\r\n  ) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- iphone5 -----------------------------------------------------------------\r\n\r\n@mixin iphone5($orientation: false) {\r\n  $min: 320px;\r\n  $max: 568px;\r\n  $pixel-ratio: 2;\r\n  $aspect-ratio: '40/71';\r\n\r\n  @include mq(\r\n    $min-device-width: $min,\r\n    $max-device-width: $max,\r\n    $orientation: $orientation,\r\n    $device-aspect-ratio: $aspect-ratio,\r\n    $-webkit-device-pixel-ratio: $pixel-ratio\r\n  ) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- iphone6 -----------------------------------------------------------------\r\n\r\n@mixin iphone6($orientation: false) {\r\n  $min: 375px;\r\n  $max: 667px;\r\n  $pixel-ratio: 2;\r\n\r\n  @include mq(\r\n    $min-device-width: $min,\r\n    $max-device-width: $max,\r\n    $orientation: $orientation,\r\n    $-webkit-device-pixel-ratio: $pixel-ratio\r\n  ) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- iphone6 plus ------------------------------------------------------------\r\n\r\n@mixin iphone6-plus($orientation: false) {\r\n  $min: 414px;\r\n  $max: 736px;\r\n  $pixel-ratio: 3;\r\n\r\n  @include mq(\r\n    $min-device-width: $min,\r\n    $max-device-width: $max,\r\n    $orientation: $orientation,\r\n    $-webkit-device-pixel-ratio: $pixel-ratio\r\n  ) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- ipad (all) --------------------------------------------------------------\r\n\r\n@mixin ipad($orientation: false) {\r\n  $min: 768px;\r\n  $max: 1024px;\r\n\r\n  @include mq(\r\n    $min-device-width: $min,\r\n    $max-device-width: $max,\r\n    $orientation: $orientation\r\n  ) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- ipad-retina -------------------------------------------------------------\r\n\r\n@mixin ipad-retina($orientation: false) {\r\n  $min: 768px;\r\n  $max: 1024px;\r\n  $pixel-ratio: 2;\r\n\r\n  @include mq(\r\n    $min-device-width: $min,\r\n    $max-device-width: $max,\r\n    $orientation: $orientation,\r\n    $-webkit-device-pixel-ratio: $pixel-ratio\r\n  ) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- orientation -------------------------------------------------------------\r\n\r\n@mixin landscape() {\r\n  @include mq($orientation: landscape) {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin portrait() {\r\n  @include mq($orientation: portrait) {\r\n    @content;\r\n  }\r\n}\r\n"]}