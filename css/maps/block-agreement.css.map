{"version":3,"sources":["blocks/block-agreement/block-agreement.scss","blocks/block-agreement/block-agreement.css","../styles/helpers/_sprites.scss","../styles/helpers/_mixins.scss"],"names":[],"mappings":"AAEA,iCAEE,QAAS,KACT,sBAAuB,+BACvB,IAAK,gBACL,YAAa,WCAf,8BDLA,YAAA,KAOC,ECED,qDACE,cDVF,ECaA,iCACE,ODMG,ECHL,oCACE,aCwDoC,MDvDpC,YEuDmC,IFpDrC,2CACE,QAAS,GACT,iBAAkB,uBAClB,oBAAqB,MAAM,EAC3B,MAAO,KACP,OAAQ,KACR,IAAK,SAGP,8BACE,YAAa,CAAC,CAAC","file":"../block-agreement.css","sourcesContent":["@import \"../../../styles/helpers/_helpers\";\n\n.block-agreement {\n\t.block__content {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: repeat(var(--grid-column), 1fr);\n\t\tgap: var(--grid-gap);\n\t\talign-items: flex-start;\n\t}\n\t.block__info {\n\t\tgrid-column: span 7;\n\t\tp {\n\t\t\t@include last(1) {\n\t\t\t\tmargin-bottom: 0;\n\t\t\t}\n\t\t}\n\t\tul {\n\t\t\tmargin: 0;\n\t\t\tli {\n\t\t\t\tpadding-left: rem(8px);\n\t\t\t\tfont-weight: 600;\n\t\t\t\t&:before {\n\t\t\t\t\tcontent: \"\";\n\t\t\t\t\t@include sprite($ok-03);\n\t\t\t\t\ttop: rem(3px);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t.information {\n\t\tgrid-column: 8/-1;\n\t}\n}\n",null,"// SCSS variables are information about icon's compiled state, stored under its original file name\n//\n// .icon-home {\n//   width: $icon-home-width;\n// }\n//\n// The large array-like variables contain all information about a single icon\n// $icon-home: x y offset_x offset_y width height total_width total_height image_path;\n//\n// At the bottom of this section, we provide information about the spritesheet itself\n// $spritesheet: width height image $spritesheet-sprites;\n$arrow-left-name: 'arrow-left';\n$arrow-left-x: 20px;\n$arrow-left-y: 40px;\n$arrow-left-offset-x: -20px;\n$arrow-left-offset-y: -40px;\n$arrow-left-width: 20px;\n$arrow-left-height: 12px;\n$arrow-left-total-width: 68px;\n$arrow-left-total-height: 52px;\n$arrow-left-image: '../img/sprite.png';\n$arrow-left: (20px, 40px, -20px, -40px, 20px, 12px, 68px, 52px, '../img/sprite.png', 'arrow-left', );\n$arrow-right-name: 'arrow-right';\n$arrow-right-x: 0px;\n$arrow-right-y: 40px;\n$arrow-right-offset-x: 0px;\n$arrow-right-offset-y: -40px;\n$arrow-right-width: 20px;\n$arrow-right-height: 12px;\n$arrow-right-total-width: 68px;\n$arrow-right-total-height: 52px;\n$arrow-right-image: '../img/sprite.png';\n$arrow-right: (0px, 40px, 0px, -40px, 20px, 12px, 68px, 52px, '../img/sprite.png', 'arrow-right', );\n$email-name: 'email';\n$email-x: 0px;\n$email-y: 24px;\n$email-offset-x: 0px;\n$email-offset-y: -24px;\n$email-width: 16px;\n$email-height: 16px;\n$email-total-width: 68px;\n$email-total-height: 52px;\n$email-image: '../img/sprite.png';\n$email: (0px, 24px, 0px, -24px, 16px, 16px, 68px, 52px, '../img/sprite.png', 'email', );\n$location-name: 'location';\n$location-x: 16px;\n$location-y: 24px;\n$location-offset-x: -16px;\n$location-offset-y: -24px;\n$location-width: 16px;\n$location-height: 16px;\n$location-total-width: 68px;\n$location-total-height: 52px;\n$location-image: '../img/sprite.png';\n$location: (16px, 24px, -16px, -24px, 16px, 16px, 68px, 52px, '../img/sprite.png', 'location', );\n$ok-02-name: 'ok-02';\n$ok-02-x: 56px;\n$ok-02-y: 26px;\n$ok-02-offset-x: -56px;\n$ok-02-offset-y: -26px;\n$ok-02-width: 10px;\n$ok-02-height: 10px;\n$ok-02-total-width: 68px;\n$ok-02-total-height: 52px;\n$ok-02-image: '../img/sprite.png';\n$ok-02: (56px, 26px, -56px, -26px, 10px, 10px, 68px, 52px, '../img/sprite.png', 'ok-02', );\n$ok-03-name: 'ok-03';\n$ok-03-x: 24px;\n$ok-03-y: 0px;\n$ok-03-offset-x: -24px;\n$ok-03-offset-y: 0px;\n$ok-03-width: 16px;\n$ok-03-height: 16px;\n$ok-03-total-width: 68px;\n$ok-03-total-height: 52px;\n$ok-03-image: '../img/sprite.png';\n$ok-03: (24px, 0px, -24px, 0px, 16px, 16px, 68px, 52px, '../img/sprite.png', 'ok-03', );\n$ok-name: 'ok';\n$ok-x: 56px;\n$ok-y: 16px;\n$ok-offset-x: -56px;\n$ok-offset-y: -16px;\n$ok-width: 10px;\n$ok-height: 10px;\n$ok-total-width: 68px;\n$ok-total-height: 52px;\n$ok-image: '../img/sprite.png';\n$ok: (56px, 16px, -56px, -16px, 10px, 10px, 68px, 52px, '../img/sprite.png', 'ok', );\n$pdf-name: 'pdf';\n$pdf-x: 0px;\n$pdf-y: 0px;\n$pdf-offset-x: 0px;\n$pdf-offset-y: 0px;\n$pdf-width: 24px;\n$pdf-height: 24px;\n$pdf-total-width: 68px;\n$pdf-total-height: 52px;\n$pdf-image: '../img/sprite.png';\n$pdf: (0px, 0px, 0px, 0px, 24px, 24px, 68px, 52px, '../img/sprite.png', 'pdf', );\n$phone-name: 'phone';\n$phone-x: 56px;\n$phone-y: 0px;\n$phone-offset-x: -56px;\n$phone-offset-y: 0px;\n$phone-width: 12px;\n$phone-height: 16px;\n$phone-total-width: 68px;\n$phone-total-height: 52px;\n$phone-image: '../img/sprite.png';\n$phone: (56px, 0px, -56px, 0px, 12px, 16px, 68px, 52px, '../img/sprite.png', 'phone', );\n$search-name: 'search';\n$search-x: 40px;\n$search-y: 0px;\n$search-offset-x: -40px;\n$search-offset-y: 0px;\n$search-width: 16px;\n$search-height: 16px;\n$search-total-width: 68px;\n$search-total-height: 52px;\n$search-image: '../img/sprite.png';\n$search: (40px, 0px, -40px, 0px, 16px, 16px, 68px, 52px, '../img/sprite.png', 'search', );\n$time-name: 'time';\n$time-x: 40px;\n$time-y: 16px;\n$time-offset-x: -40px;\n$time-offset-y: -16px;\n$time-width: 16px;\n$time-height: 16px;\n$time-total-width: 68px;\n$time-total-height: 52px;\n$time-image: '../img/sprite.png';\n$time: (40px, 16px, -40px, -16px, 16px, 16px, 68px, 52px, '../img/sprite.png', 'time', );\n$spritesheet-width: 68px;\n$spritesheet-height: 52px;\n$spritesheet-image: '../img/sprite.png';\n$spritesheet-sprites: ($arrow-left, $arrow-right, $email, $location, $ok-02, $ok-03, $ok, $pdf, $phone, $search, $time, );\n$spritesheet: (68px, 52px, '../img/sprite.png', $spritesheet-sprites, );\n\n// The provided mixins are intended to be used with the array-like variables\n//\n// .icon-home {\n//   @include sprite-width($icon-home);\n// }\n//\n// .icon-email {\n//   @include sprite($icon-email);\n// }\n//\n// Example usage in HTML:\n//\n// `display: block` sprite:\n// <div class=\"icon-home\"></div>\n//\n// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:\n//\n// // CSS\n// .icon {\n//   display: inline-block;\n// }\n//\n// // HTML\n// <i class=\"icon icon-home\"></i>\n@mixin sprite-width($sprite) {\n  width: nth($sprite, 5);\n}\n\n@mixin sprite-height($sprite) {\n  height: nth($sprite, 6);\n}\n\n@mixin sprite-position($sprite) {\n  $sprite-offset-x: nth($sprite, 3);\n  $sprite-offset-y: nth($sprite, 4);\n  background-position: $sprite-offset-x  $sprite-offset-y;\n}\n\n@mixin sprite-image($sprite) {\n  $sprite-image: nth($sprite, 9);\n  background-image: url(#{$sprite-image});\n}\n\n@mixin sprite($sprite) {\n  @include sprite-image($sprite);\n  @include sprite-position($sprite);\n  @include sprite-width($sprite);\n  @include sprite-height($sprite);\n}\n\n// The `sprites` mixin generates identical output to the CSS template\n//   but can be overridden inside of SCSS\n//\n// @include sprites($spritesheet-sprites);\n@mixin sprites($sprites) {\n  @each $sprite in $sprites {\n    $sprite-name: nth($sprite, 10);\n    .#{$sprite-name} {\n      @include sprite($sprite);\n    }\n  }\n}\n","@mixin font-mixin($style, $main-path, $family, $map) {\r\n    $dir-name: $family + \"/\"; // Генерируем название директории, в которой находится шрифт\r\n    @each $weight, $path in $map {\r\n        @font-face {\r\n            font-display: swap;\r\n            font-family: $family;\r\n            src: url(\"#{$main-path + $dir-name + $style + $path}.eot\");\r\n            src: url(\"#{$main-path + $dir-name + $style + $path}.eot?#iefix\") format(\"embedded-opentype\"),\r\n            url(\"#{$main-path + $dir-name + $style + $path}.woff2\") format(\"woff2\"),\r\n            url(\"#{$main-path + $dir-name + $style + $path}.woff\") format(\"woff\"),\r\n            url(\"#{$main-path + $dir-name + $style + $path}.ttf\") format(\"truetype\"),\r\n            url(\"#{$main-path + $dir-name + $style + $path}.svg##{$family}\") format(\"svg\");\r\n            font-style: $style;\r\n            font-weight: $weight;\r\n        }\r\n    }\r\n}\r\n\r\n@mixin placeholder() {\r\n    &::-webkit-input-placeholder {@content;}\r\n    &::-moz-placeholder {@content;}\r\n    &:-moz-placeholder {@content;}\r\n    &:-ms-input-placeholder {@content;}\r\n}\r\n\r\n@mixin fontAwesome($code: \"\", $size: inherit, $weight: 100) {\r\n    content: $code;\r\n    font-family: \"Font Awesome 5 Pro\";\r\n    font-size: $size;\r\n    font-weight: $weight;\r\n    line-height: 1;\r\n}\r\n\r\n@mixin iconmoon($code: \"\", $size: inherit, $weight: 100) {\r\n    content: $code;\r\n    font-family: \"icomoon\";\r\n    font-size: $size;\r\n    font-weight: $weight;\r\n    line-height: 1;\r\n}\r\n\r\n// REM CONVERT\r\n$rem-baseline: 16px !default;\r\n$rem-fallback: false !default;\r\n$rem-px-only: false !default;\r\n\r\n@function rem-separator($list, $separator: false) {\r\n    @if $separator == \"comma\" or $separator == \"space\" {\r\n        @return append($list, null, $separator);\r\n    }\r\n\r\n    @if function-exists(\"list-separator\") == true {\r\n        @return list-separator($list);\r\n    }\r\n\r\n    // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)\r\n    $test-list: ();\r\n    @each $item in $list {\r\n        $test-list: append($test-list, $item, space);\r\n    }\r\n\r\n    @return if($test-list == $list, space, comma);\r\n}\r\n\r\n@mixin rem-baseline($zoom: 100%) {\r\n    font-size: $zoom / 16px * $rem-baseline;\r\n}\r\n\r\n@function rem-convert($to, $values...) {\r\n    $result: ();\r\n    $separator: rem-separator($values);\r\n\r\n    @each $value in $values {\r\n        @if type-of($value) == \"number\" and unit($value) == \"rem\" and $to == \"px\" {\r\n            $result: append($result, $value / 1rem * $rem-baseline, $separator);\r\n        } @else if type-of($value) == \"number\" and unit($value) == \"px\" and $to == \"rem\" {\r\n            $result: append($result, $value / $rem-baseline * 1rem, $separator);\r\n        } @else if type-of($value) == \"list\" {\r\n            $value-separator: rem-separator($value);\r\n            $value: rem-convert($to, $value...);\r\n            $value: rem-separator($value, $value-separator);\r\n            $result: append($result, $value, $separator);\r\n        } @else {\r\n            $result: append($result, $value, $separator);\r\n        }\r\n    }\r\n\r\n    @return if(length($result) == 1, nth($result, 1), $result);\r\n}\r\n\r\n@function rem($values...) {\r\n    @if $rem-px-only {\r\n        @return rem-convert(px, $values...);\r\n    } @else {\r\n        @return rem-convert(rem, $values...);\r\n    }\r\n}\r\n\r\n@mixin rem($properties, $values...) {\r\n    @if type-of($properties) == \"map\" {\r\n        @each $property in map-keys($properties) {\r\n            @include rem($property, map-get($properties, $property));\r\n        }\r\n    } @else {\r\n        @each $property in $properties {\r\n            @if $rem-fallback or $rem-px-only {\r\n                #{$property}: rem-convert(px, $values...);\r\n            }\r\n            @if not $rem-px-only {\r\n                #{$property}: rem-convert(rem, $values...);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// EM CONVERT\r\n// list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)\r\n@function em-separator($list) {\r\n    @if function-exists(\"list-separator\") == true {\r\n        @return list-separator($list);\r\n    }\r\n\r\n    $test-list: ();\r\n    @each $item in $list {\r\n        $test-list: append($test-list, $item, space);\r\n    }\r\n\r\n    @return if($test-list == $list, space, comma);\r\n}\r\n@function em($values...) {\r\n    $context: nth($values, length($values));\r\n    $result: ();\r\n    $separator: em-separator($values);\r\n\r\n    @for $i from 1 through length($values) - 1 {\r\n        $value: nth($values, $i);\r\n        @if type-of($value) == \"number\" and unit($value) == \"px\" {\r\n            $result: append($result, $value / $context * 1em, $separator);\r\n        } @else if type-of($value) == \"list\" {\r\n            $result: append($result, em(append($value, $context)...), $separator);\r\n        } @else {\r\n            $result: append($result, $value, $separator);\r\n        }\r\n    }\r\n\r\n    @return if(length($result) == 1, nth($result, 1), $result);\r\n}\r\n@mixin em($properties, $context) {\r\n    @each $property in map-keys($properties) {\r\n        #{$property}: em(append(map-get($properties, $property), $context)...);\r\n    }\r\n}"]}