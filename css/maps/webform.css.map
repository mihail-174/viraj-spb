{"version":3,"sources":["webforms/webform.scss","../styles/helpers/_mixins.scss","webforms/webform.css","../styles/helpers/_media-queries.scss"],"names":[],"mappings":"AAEA,yBACI,QAAS,KACT,ICwEiC,KCvErC,2CACE,QCsBM,KDrBN,IFLF,KAAA,KEYA,oCAJA,2CFRA,OAAA,EEgBA,mDACE,QFjBF,EEkBE,MFMU,KELV,UFMU,OEHZ,qDFtBA,OAAA,EE0BA,qDACE,MFYM,KAvCR,UAAA,OE6BE,aFeqB,KEZvB,2DACE,aAAc,YAGhB,6CFmBA,OAAA,EEfA,6DACA,sDACE,QAAS,EAGX,oDACE,UAAW,OACX,IAAK,OAGP,uCACE,WAAY,OAGd,4BACE,QAAS,KAGX,+BACE,OAAQ,EAGV,yCACE,2CACE,YAAa","file":"../webform.css","sourcesContent":["@import \"../../styles/helpers/_helpers\";\n\n.webform-submission-form {\n    display: grid;\n    gap: rem(16px);\n    .webform-elements {\n        display: grid;\n        gap: rem(16px 16px);\n        @include min-screen(769px) {\n            align-items: flex-start;\n        }\n    }\n    .messages-wrapper {\n        margin: 0;\n    }\n    .form-item {\n        margin: 0;\n    }\n    .form-item-privacy-policy {\n        padding: 0;\n        color: #aaaaaa;\n        font-size: rem(12px);\n        p {\n            margin: 0;\n        }\n        a {\n            color: #aaaaaa;\n            font-size: rem(12px);\n            border-color: #aaaaaa;\n            &:hover {\n                border-color: transparent;\n            }\n        }\n    }\n    .form-item-markup {\n        p {\n            margin: 0;\n        }\n    }\n    .js-form-type-webform-document-file,\n    .js-form-type-webform-markup {\n        padding: 0;\n    }\n    //.js-form-type-tel,\n    .js-form-type-select {\n        label {\n            font-size: 0.75rem;\n            top: -0.5rem;\n        }\n    }\n    .form-actions {\n        text-align: center;\n    }\n}\n.webform-confirmation__back {\n    display: none;\n}\n.webform-confirmation__message {\n    margin: 0;\n}","@mixin font-mixin($style, $main-path, $family, $map) {\r\n    $dir-name: $family + \"/\"; // Генерируем название директории, в которой находится шрифт\r\n    @each $weight, $path in $map {\r\n        @font-face {\r\n            font-display: swap;\r\n            font-family: $family;\r\n            src: url(\"#{$main-path + $dir-name + $style + $path}.eot\");\r\n            src: url(\"#{$main-path + $dir-name + $style + $path}.eot?#iefix\") format(\"embedded-opentype\"),\r\n            url(\"#{$main-path + $dir-name + $style + $path}.woff2\") format(\"woff2\"),\r\n            url(\"#{$main-path + $dir-name + $style + $path}.woff\") format(\"woff\"),\r\n            url(\"#{$main-path + $dir-name + $style + $path}.ttf\") format(\"truetype\"),\r\n            url(\"#{$main-path + $dir-name + $style + $path}.svg##{$family}\") format(\"svg\");\r\n            font-style: $style;\r\n            font-weight: $weight;\r\n        }\r\n    }\r\n}\r\n\r\n@mixin placeholder() {\r\n    &::-webkit-input-placeholder {@content;}\r\n    &::-moz-placeholder {@content;}\r\n    &:-moz-placeholder {@content;}\r\n    &:-ms-input-placeholder {@content;}\r\n}\r\n\r\n@mixin fontAwesome($code: \"\", $size: inherit, $weight: 100) {\r\n    content: $code;\r\n    font-family: \"Font Awesome 5 Pro\";\r\n    font-size: $size;\r\n    font-weight: $weight;\r\n    line-height: 1;\r\n}\r\n\r\n@mixin iconmoon($code: \"\", $size: inherit, $weight: 100) {\r\n    content: $code;\r\n    font-family: \"icomoon\";\r\n    font-size: $size;\r\n    font-weight: $weight;\r\n    line-height: 1;\r\n}\r\n\r\n// REM CONVERT\r\n$rem-baseline: 16px !default;\r\n$rem-fallback: false !default;\r\n$rem-px-only: false !default;\r\n\r\n@function rem-separator($list, $separator: false) {\r\n    @if $separator == \"comma\" or $separator == \"space\" {\r\n        @return append($list, null, $separator);\r\n    }\r\n\r\n    @if function-exists(\"list-separator\") == true {\r\n        @return list-separator($list);\r\n    }\r\n\r\n    // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)\r\n    $test-list: ();\r\n    @each $item in $list {\r\n        $test-list: append($test-list, $item, space);\r\n    }\r\n\r\n    @return if($test-list == $list, space, comma);\r\n}\r\n\r\n@mixin rem-baseline($zoom: 100%) {\r\n    font-size: $zoom / 16px * $rem-baseline;\r\n}\r\n\r\n@function rem-convert($to, $values...) {\r\n    $result: ();\r\n    $separator: rem-separator($values);\r\n\r\n    @each $value in $values {\r\n        @if type-of($value) == \"number\" and unit($value) == \"rem\" and $to == \"px\" {\r\n            $result: append($result, $value / 1rem * $rem-baseline, $separator);\r\n        } @else if type-of($value) == \"number\" and unit($value) == \"px\" and $to == \"rem\" {\r\n            $result: append($result, $value / $rem-baseline * 1rem, $separator);\r\n        } @else if type-of($value) == \"list\" {\r\n            $value-separator: rem-separator($value);\r\n            $value: rem-convert($to, $value...);\r\n            $value: rem-separator($value, $value-separator);\r\n            $result: append($result, $value, $separator);\r\n        } @else {\r\n            $result: append($result, $value, $separator);\r\n        }\r\n    }\r\n\r\n    @return if(length($result) == 1, nth($result, 1), $result);\r\n}\r\n\r\n@function rem($values...) {\r\n    @if $rem-px-only {\r\n        @return rem-convert(px, $values...);\r\n    } @else {\r\n        @return rem-convert(rem, $values...);\r\n    }\r\n}\r\n\r\n@mixin rem($properties, $values...) {\r\n    @if type-of($properties) == \"map\" {\r\n        @each $property in map-keys($properties) {\r\n            @include rem($property, map-get($properties, $property));\r\n        }\r\n    } @else {\r\n        @each $property in $properties {\r\n            @if $rem-fallback or $rem-px-only {\r\n                #{$property}: rem-convert(px, $values...);\r\n            }\r\n            @if not $rem-px-only {\r\n                #{$property}: rem-convert(rem, $values...);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// EM CONVERT\r\n// list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)\r\n@function em-separator($list) {\r\n    @if function-exists(\"list-separator\") == true {\r\n        @return list-separator($list);\r\n    }\r\n\r\n    $test-list: ();\r\n    @each $item in $list {\r\n        $test-list: append($test-list, $item, space);\r\n    }\r\n\r\n    @return if($test-list == $list, space, comma);\r\n}\r\n@function em($values...) {\r\n    $context: nth($values, length($values));\r\n    $result: ();\r\n    $separator: em-separator($values);\r\n\r\n    @for $i from 1 through length($values) - 1 {\r\n        $value: nth($values, $i);\r\n        @if type-of($value) == \"number\" and unit($value) == \"px\" {\r\n            $result: append($result, $value / $context * 1em, $separator);\r\n        } @else if type-of($value) == \"list\" {\r\n            $result: append($result, em(append($value, $context)...), $separator);\r\n        } @else {\r\n            $result: append($result, $value, $separator);\r\n        }\r\n    }\r\n\r\n    @return if(length($result) == 1, nth($result, 1), $result);\r\n}\r\n@mixin em($properties, $context) {\r\n    @each $property in map-keys($properties) {\r\n        #{$property}: em(append(map-get($properties, $property), $context)...);\r\n    }\r\n}",null,"//  Author: Rafal Bromirski\r\n//  www: http://rafalbromirski.com/\r\n//  github: http://github.com/paranoida/sass-mediaqueries\r\n//\r\n//  Licensed under a MIT License\r\n//\r\n//  Version:\r\n//  1.6.1\r\n\r\n// --- generator ---------------------------------------------------------------\r\n\r\n@mixin mq($args...) {\r\n  $media-type: 'only screen';\r\n  $media-type-key: 'media-type';\r\n  $args: keywords($args);\r\n  $expr: '';\r\n\r\n  @if map-has-key($args, $media-type-key) {\r\n    $media-type: map-get($args, $media-type-key);\r\n    $args: map-remove($args, $media-type-key);\r\n  }\r\n\r\n  @each $key, $value in $args {\r\n    @if $value {\r\n      $expr: \"#{$expr} and (#{$key}: #{$value})\";\r\n    }\r\n  }\r\n\r\n  @media #{$media-type} #{$expr} {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- screen ------------------------------------------------------------------\r\n\r\n@mixin screen($min, $max, $orientation: false) {\r\n  @include mq($min-width: $min, $max-width: $max, $orientation: $orientation) {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin max-screen($max) {\r\n  @include mq($max-width: $max) {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin min-screen($min) {\r\n  @include mq($min-width: $min) {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin screen-height($min, $max, $orientation: false) {\r\n  @include mq($min-height: $min, $max-height: $max, $orientation: $orientation) {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin max-screen-height($max) {\r\n  @include mq($max-height: $max) {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin min-screen-height($min) {\r\n  @include mq($min-height: $min) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- hdpi --------------------------------------------------------------------\r\n\r\n@mixin hdpi($ratio: 1.3) {\r\n  @media only screen and (-webkit-min-device-pixel-ratio: $ratio),\r\n  only screen and (min-resolution: #{round($ratio*96)}dpi) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- hdtv --------------------------------------------------------------------\r\n\r\n@mixin hdtv($standard: '1080') {\r\n  $min-width: false;\r\n  $min-height: false;\r\n\r\n  $standards: ('720p', 1280px, 720px)\r\n              ('1080', 1920px, 1080px)\r\n              ('2K', 2048px, 1080px)\r\n              ('4K', 4096px, 2160px);\r\n\r\n  @each $s in $standards {\r\n    @if $standard == nth($s, 1) {\r\n      $min-width: nth($s, 2);\r\n      $min-height: nth($s, 3);\r\n    }\r\n  }\r\n\r\n  @include mq(\r\n    $min-device-width: $min-width,\r\n    $min-device-height: $min-height,\r\n    $min-width: $min-width,\r\n    $min-height: $min-height\r\n  ) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- iphone4 -----------------------------------------------------------------\r\n\r\n@mixin iphone4($orientation: false) {\r\n  $min: 320px;\r\n  $max: 480px;\r\n  $pixel-ratio: 2;\r\n  $aspect-ratio: '2/3';\r\n\r\n  @include mq(\r\n    $min-device-width: $min,\r\n    $max-device-width: $max,\r\n    $orientation: $orientation,\r\n    $device-aspect-ratio: $aspect-ratio,\r\n    $-webkit-device-pixel-ratio: $pixel-ratio\r\n  ) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- iphone5 -----------------------------------------------------------------\r\n\r\n@mixin iphone5($orientation: false) {\r\n  $min: 320px;\r\n  $max: 568px;\r\n  $pixel-ratio: 2;\r\n  $aspect-ratio: '40/71';\r\n\r\n  @include mq(\r\n    $min-device-width: $min,\r\n    $max-device-width: $max,\r\n    $orientation: $orientation,\r\n    $device-aspect-ratio: $aspect-ratio,\r\n    $-webkit-device-pixel-ratio: $pixel-ratio\r\n  ) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- iphone6 -----------------------------------------------------------------\r\n\r\n@mixin iphone6($orientation: false) {\r\n  $min: 375px;\r\n  $max: 667px;\r\n  $pixel-ratio: 2;\r\n\r\n  @include mq(\r\n    $min-device-width: $min,\r\n    $max-device-width: $max,\r\n    $orientation: $orientation,\r\n    $-webkit-device-pixel-ratio: $pixel-ratio\r\n  ) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- iphone6 plus ------------------------------------------------------------\r\n\r\n@mixin iphone6-plus($orientation: false) {\r\n  $min: 414px;\r\n  $max: 736px;\r\n  $pixel-ratio: 3;\r\n\r\n  @include mq(\r\n    $min-device-width: $min,\r\n    $max-device-width: $max,\r\n    $orientation: $orientation,\r\n    $-webkit-device-pixel-ratio: $pixel-ratio\r\n  ) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- ipad (all) --------------------------------------------------------------\r\n\r\n@mixin ipad($orientation: false) {\r\n  $min: 768px;\r\n  $max: 1024px;\r\n\r\n  @include mq(\r\n    $min-device-width: $min,\r\n    $max-device-width: $max,\r\n    $orientation: $orientation\r\n  ) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- ipad-retina -------------------------------------------------------------\r\n\r\n@mixin ipad-retina($orientation: false) {\r\n  $min: 768px;\r\n  $max: 1024px;\r\n  $pixel-ratio: 2;\r\n\r\n  @include mq(\r\n    $min-device-width: $min,\r\n    $max-device-width: $max,\r\n    $orientation: $orientation,\r\n    $-webkit-device-pixel-ratio: $pixel-ratio\r\n  ) {\r\n    @content;\r\n  }\r\n}\r\n\r\n// --- orientation -------------------------------------------------------------\r\n\r\n@mixin landscape() {\r\n  @include mq($orientation: landscape) {\r\n    @content;\r\n  }\r\n}\r\n\r\n@mixin portrait() {\r\n  @include mq($orientation: portrait) {\r\n    @content;\r\n  }\r\n}\r\n"]}