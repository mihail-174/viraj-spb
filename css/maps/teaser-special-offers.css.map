{"version":3,"sources":["teasers/teaser-special-offers/teaser-special-offers.scss","../styles/helpers/_mixins.scss","teasers/teaser-special-offers/teaser-special-offers.css"],"names":[],"mappings":"AAEA,uBACC,iBAAkB,KAClB,OAAQ,IAAA,MAAA,QACR,WAAY,EAAA,EAAA,KAAA,YACZ,WAAY,WAAA,IAAA,YACZ,QCqEoC,QDpEpC,QAAS,KACT,ICmEoC,QDlEpC,SAAU,SACV,YAAa,KAAA,EACb,aAAc,KACd,cAAe,WEChB,6BFZA,WAAA,EAAA,EAAA,KAgBC,mBEFC,QFIC,EEDH,sCACE,YFIW,IEHX,YACA,eFIQ,UEDV,6CACE,QFIE,GA5BJ,SAAA,SE0BE,IFOA,EENA,KFOA,EENA,MAAO,EACP,OAAQ,EACR,QAAS,EAGX,0CACE,MAAO,QACP,UAAW","file":"../teaser-special-offers.css","sourcesContent":["@import \"../../../styles/helpers/_helpers\";\n\n.teaser-special-offers {\n\tbackground-color: #ffffff;\n\tborder: 1px solid #dfe1e3;\n\tbox-shadow: 0px 0px 10px transparent;\n\ttransition: box-shadow 0.2s ease-in-out;\n\tpadding: rem(20px);\n\tdisplay: grid;\n\tgap: rem(20px);\n\tposition: relative;\n\tgrid-column: span 3;\n\tmargin-right: -1px;\n\talign-content: flex-start;\n\t&:hover {\n\t\tbox-shadow: 0px 0px 10px rgba(35, 71, 95, 0.15);\n\t\tz-index: 1;\n\t}\n\t.field-title {\n\t\ta {\n\t\t\tfont-weight: 600;\n\t\t\tborder: none;\n\t\t\ttext-transform: uppercase;\n\t\t\t&:before {\n\t\t\t\tcontent: \"\";\n\t\t\t\tposition: absolute;\n\t\t\t\ttop: 0;\n\t\t\t\tleft: 0;\n\t\t\t\tright: 0;\n\t\t\t\tbottom: 0;\n\t\t\t\tz-index: 1;\n\t\t\t}\n\t\t}\n\t}\n\t.field-description {\n\t\tcolor: #777E8B;\n\t\tfont-size: var(--font-size-sm);\n\t}\n}\n","@mixin font-mixin($style, $main-path, $family, $map) {\r\n    $dir-name: $family + \"/\"; // Генерируем название директории, в которой находится шрифт\r\n    @each $weight, $path in $map {\r\n        @font-face {\r\n            font-display: swap;\r\n            font-family: $family;\r\n            src: url(\"#{$main-path + $dir-name + $style + $path}.eot\");\r\n            src: url(\"#{$main-path + $dir-name + $style + $path}.eot?#iefix\") format(\"embedded-opentype\"),\r\n            url(\"#{$main-path + $dir-name + $style + $path}.woff2\") format(\"woff2\"),\r\n            url(\"#{$main-path + $dir-name + $style + $path}.woff\") format(\"woff\"),\r\n            url(\"#{$main-path + $dir-name + $style + $path}.ttf\") format(\"truetype\"),\r\n            url(\"#{$main-path + $dir-name + $style + $path}.svg##{$family}\") format(\"svg\");\r\n            font-style: $style;\r\n            font-weight: $weight;\r\n        }\r\n    }\r\n}\r\n\r\n@mixin placeholder() {\r\n    &::-webkit-input-placeholder {@content;}\r\n    &::-moz-placeholder {@content;}\r\n    &:-moz-placeholder {@content;}\r\n    &:-ms-input-placeholder {@content;}\r\n}\r\n\r\n@mixin fontAwesome($code: \"\", $size: inherit, $weight: 100) {\r\n    content: $code;\r\n    font-family: \"Font Awesome 5 Pro\";\r\n    font-size: $size;\r\n    font-weight: $weight;\r\n    line-height: 1;\r\n}\r\n\r\n@mixin iconmoon($code: \"\", $size: inherit, $weight: 100) {\r\n    content: $code;\r\n    font-family: \"icomoon\";\r\n    font-size: $size;\r\n    font-weight: $weight;\r\n    line-height: 1;\r\n}\r\n\r\n// REM CONVERT\r\n$rem-baseline: 16px !default;\r\n$rem-fallback: false !default;\r\n$rem-px-only: false !default;\r\n\r\n@function rem-separator($list, $separator: false) {\r\n    @if $separator == \"comma\" or $separator == \"space\" {\r\n        @return append($list, null, $separator);\r\n    }\r\n\r\n    @if function-exists(\"list-separator\") == true {\r\n        @return list-separator($list);\r\n    }\r\n\r\n    // list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)\r\n    $test-list: ();\r\n    @each $item in $list {\r\n        $test-list: append($test-list, $item, space);\r\n    }\r\n\r\n    @return if($test-list == $list, space, comma);\r\n}\r\n\r\n@mixin rem-baseline($zoom: 100%) {\r\n    font-size: $zoom / 16px * $rem-baseline;\r\n}\r\n\r\n@function rem-convert($to, $values...) {\r\n    $result: ();\r\n    $separator: rem-separator($values);\r\n\r\n    @each $value in $values {\r\n        @if type-of($value) == \"number\" and unit($value) == \"rem\" and $to == \"px\" {\r\n            $result: append($result, $value / 1rem * $rem-baseline, $separator);\r\n        } @else if type-of($value) == \"number\" and unit($value) == \"px\" and $to == \"rem\" {\r\n            $result: append($result, $value / $rem-baseline * 1rem, $separator);\r\n        } @else if type-of($value) == \"list\" {\r\n            $value-separator: rem-separator($value);\r\n            $value: rem-convert($to, $value...);\r\n            $value: rem-separator($value, $value-separator);\r\n            $result: append($result, $value, $separator);\r\n        } @else {\r\n            $result: append($result, $value, $separator);\r\n        }\r\n    }\r\n\r\n    @return if(length($result) == 1, nth($result, 1), $result);\r\n}\r\n\r\n@function rem($values...) {\r\n    @if $rem-px-only {\r\n        @return rem-convert(px, $values...);\r\n    } @else {\r\n        @return rem-convert(rem, $values...);\r\n    }\r\n}\r\n\r\n@mixin rem($properties, $values...) {\r\n    @if type-of($properties) == \"map\" {\r\n        @each $property in map-keys($properties) {\r\n            @include rem($property, map-get($properties, $property));\r\n        }\r\n    } @else {\r\n        @each $property in $properties {\r\n            @if $rem-fallback or $rem-px-only {\r\n                #{$property}: rem-convert(px, $values...);\r\n            }\r\n            @if not $rem-px-only {\r\n                #{$property}: rem-convert(rem, $values...);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n// EM CONVERT\r\n// list-separator polyfill by Hugo Giraudel (https://sass-compatibility.github.io/#list_separator_function)\r\n@function em-separator($list) {\r\n    @if function-exists(\"list-separator\") == true {\r\n        @return list-separator($list);\r\n    }\r\n\r\n    $test-list: ();\r\n    @each $item in $list {\r\n        $test-list: append($test-list, $item, space);\r\n    }\r\n\r\n    @return if($test-list == $list, space, comma);\r\n}\r\n@function em($values...) {\r\n    $context: nth($values, length($values));\r\n    $result: ();\r\n    $separator: em-separator($values);\r\n\r\n    @for $i from 1 through length($values) - 1 {\r\n        $value: nth($values, $i);\r\n        @if type-of($value) == \"number\" and unit($value) == \"px\" {\r\n            $result: append($result, $value / $context * 1em, $separator);\r\n        } @else if type-of($value) == \"list\" {\r\n            $result: append($result, em(append($value, $context)...), $separator);\r\n        } @else {\r\n            $result: append($result, $value, $separator);\r\n        }\r\n    }\r\n\r\n    @return if(length($result) == 1, nth($result, 1), $result);\r\n}\r\n@mixin em($properties, $context) {\r\n    @each $property in map-keys($properties) {\r\n        #{$property}: em(append(map-get($properties, $property), $context)...);\r\n    }\r\n}",null]}